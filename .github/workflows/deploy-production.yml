name: Deploy suite (Production)

on:
  push:
    branches: [ main ]
    # tags: [ 'v[0-9]+.[0-9]+.[0-9]+' ]

env:
  ECR_REGISTRY: 598984531759.dkr.ecr.us-east-2.amazonaws.com

jobs:
  vars:
    runs-on: ubuntu-latest
    steps:
    - id: tag_version
      run: |
        REF=$(echo $GITHUB_REF | cut -d / -f 3)
        [[ "$GITHUB_REF" =~ ^refs/tags.*$ ]] && VERSION="$REF" || VERSION="${REF}-${GITHUB_SHA::7}"
        echo ::set-output name=version::$(echo "$VERSION")
    - id: send-message
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        slack-channel: deployments
        slack-text: Deployment of ${{ github.repository }} has begun.
      env:
        INPUT_SLACK-OPTIONAL-blocks: |
          [
            { type: 'section', text: { type: 'mrkdwn', text: 'A deployment for *${{ github.repository }}* has begun.' } },
            { type: 'divider' },
            { type: 'section', fields: [
                { type: 'mrkdwn', text: '*Version:*\n${{ steps.tag_version.outputs.version }}' },
                { type: 'mrkdwn', text: '*Author:*\n${{ github.triggering_actor }}' },
            ]},
            { type: 'divider' },
            {
              type: 'section',
              text: { type: 'mrkdwn', text: '${{ github.workflow}} #${{ github.run_id }}' },
              accessory: { type: 'button', text: { type: 'plain_text', text: 'View Deployment' }, url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id}}' },
            },
          ]
    outputs:
      version: ${{ steps.tag_version.outputs.version }}
      slack-channel: ${{ fromJson(steps.send-message.outputs.slack-result).response.channel }}
      slack-thread: ${{ fromJson(steps.send-message.outputs.slack-result).response.message.ts }}

  post-deploy-failure:
    if: failure()
    needs: [vars, deploy-services, deploy-graphql-servers, deploy-app]
    runs-on: ubuntu-latest
    steps:
    - name: Notify failure
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        slack-channel: ${{ needs.vars.outputs.slack-channel }}
        slack-text: Deployment failed!
        slack-optional-thread_ts: ${{ needs.vars.outputs.slack-thread }}
        slack-optional-reply_broadcast: true

  post-deploy-success:
    if: success()
    needs: [vars, deploy-services, deploy-graphql-servers, deploy-app]
    runs-on: ubuntu-latest
    steps:
    - name: Notify success
      uses: archive/github-actions-slack@master
      with:
        slack-function: send-message
        slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
        slack-channel: ${{ needs.vars.outputs.slack-channel }}
        slack-text: Deployment complete.
        slack-optional-thread_ts: ${{ needs.vars.outputs.slack-thread }}

  build-app:
    needs: [vars]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: app, name: app }
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v1
        name: Login to ECR
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: app/Dockerfile
          push: true
          build-args: |
            COMMAND_URL=${{ secrets.COMMAND_URL }} \
            QUERY_URL=${{ secrets.QUERY_URL }} \
            SUBSCRIPTION_URL=${{ secrets.SUBSCRIPTION_URL }} \
          tags: ${{ env.ECR_REGISTRY }}/sso-${{ matrix.service.name }}:${{ needs.vars.outputs.version }}

  build:
    needs: [vars]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: cli, name: cli }
          - { path: graphql/command, name: graphql-command }
          - { path: graphql/query, name: graphql-query }
          - { path: graphql/subscription, name: graphql-subscription }
          - { path: services/command-processor, name: command-processor }
          - { path: services/event-store-listener, name: event-store-listener }
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v1
        name: Login to ECR
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          build-args: |
            SERVICE_PATH=${{ matrix.service.path }}
          tags: ${{ env.ECR_REGISTRY }}/sso-${{ matrix.service.name }}:${{ needs.vars.outputs.version }}

  deploy-services:
    needs: [vars, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: cli, name: cli }
          - { path: services/command-processor, name: command-processor }
          - { path: services/event-store-listener, name: event-store-listener }
    steps:
      - name: Deploy to Kubernetes
        run: |
          npx @parameter1/rancher2cli dl \
            --wait=true --namespace sso \
            sso-service ${{ matrix.service.name }} \
            ${{ env.ECR_REGISTRY }}/sso-${{ matrix.service.name }}:${{ needs.vars.outputs.version }}
        env:
          RANCHER_CLUSTERID: ${{ secrets.RANCHER_CLUSTERID_MINDFUL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
          RANCHER_URL: ${{ secrets.RANCHER_URL }}

  deploy-graphql-servers:
    needs: [vars, build, deploy-services]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: graphql/command, name: graphql-command }
          - { path: graphql/query, name: graphql-query }
          - { path: graphql/subscription, name: graphql-subscription }
    steps:
      - name: Deploy to Kubernetes
        run: |
          npx @parameter1/rancher2cli dl \
            --wait=true --namespace sso \
            sso-service ${{ matrix.service.name }} \
            ${{ env.ECR_REGISTRY }}/sso-${{ matrix.service.name }}:${{ needs.vars.outputs.version }}
        env:
          RANCHER_CLUSTERID: ${{ secrets.RANCHER_CLUSTERID_MINDFUL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
          RANCHER_URL: ${{ secrets.RANCHER_URL }}

  deploy-app:
    needs: [vars, build-app, deploy-graphql-servers]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: app, name: app }
    steps:
      - name: Deploy to Kubernetes
        run: |
          npx @parameter1/rancher2cli dl \
            --wait=true --namespace sso \
            sso-service ${{ matrix.service.name }} \
            ${{ env.ECR_REGISTRY }}/sso-${{ matrix.service.name }}:${{ needs.vars.outputs.version }}
        env:
          RANCHER_CLUSTERID: ${{ secrets.RANCHER_CLUSTERID_MINDFUL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
          RANCHER_URL: ${{ secrets.RANCHER_URL }}
